#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans cmbr
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 4cm
\rightmargin 3cm
\bottommargin 4cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\color cyan
adbc - Design by Contract for AspectJ
\end_layout

\begin_layout Date
User manual - version 0.1
\end_layout

\begin_layout Standard
Adbc is a small and lightweight library that adds support for Design by
 Contract to the AspectJ programming language.
 The library essentially consists of a number of aspects that monitor your
 contracts at runtime and will throw an exception whenever a contract is
 broken.
\end_layout

\begin_layout Section*
Requirements
\end_layout

\begin_layout Standard
Java 6 (or later) and AspectJ (tested on 1.6.12) are required.
\end_layout

\begin_layout Section*
Installation
\end_layout

\begin_layout Standard
Include 
\family typewriter
adbc.jar
\family default
 on the build path of your AspectJ project and contract enforcement should
 be enabled automatically.
 More specifically, if you are using Eclipse+AJDT, right-click your AspectJ
 project, go to 
\begin_inset Quotes eld
\end_inset

Properties
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

AspectJ Build
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

InPath
\begin_inset Quotes erd
\end_inset

 and click the 
\begin_inset Quotes eld
\end_inset

Add (External) JARs...
\begin_inset Quotes erd
\end_inset

 button.
 (See the Caveats section if an exception is thrown.)
\end_layout

\begin_layout Standard
Because the aspects within adbc can advise any method call and advice execution,
 you probably want to hide its advice markers.
 You can do this in AJDT by right-clicking any advice marker, then go to
 
\begin_inset Quotes eld
\end_inset

AspectJ Tools
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Configure advice markers...
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
If you want to tinker with adbc on a small toy project before enabling it
 on your own projects, just have a look at the included example in the 
\family typewriter
adbc/source/src/be/ac/ua/ansymo/example_bank
\family default
 folder.
\end_layout

\begin_layout Section*
Usage
\end_layout

\begin_layout Standard
Contracts are specified as Java annotations: You can specify preconditions
 (
\family typewriter
@requires
\family default
), postconditions (
\family typewriter
@ensures
\family default
) and invariants (
\family typewriter
@invariant
\family default
).
 Pre -and postcondition annotations are specified at the level of methods
 and advice.
 Invariants are specified at the level of classes and aspects.
\end_layout

\begin_layout Standard
The contracts themselves are written in the form of Javascript expressions,
 as a String parameter of the annotation.
 If a contract consists of multiple parts, you can also pass an array of
 Strings.
 The following example of a simple 
\family typewriter
Square
\family default
 class demonstrates the syntax of contracts:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},tabsize=2"
inline false
status open

\begin_layout Plain Layout

@invariant("$this.getWidth()==$this.getHeight()")
\end_layout

\begin_layout Plain Layout

class Square {
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@requires("s > 0"})
\end_layout

\begin_layout Plain Layout

		@ensures({"$this.getHeight()==s", "$this.getWidth()==s"})
\end_layout

\begin_layout Plain Layout

		public void setSize(int s) {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@ensures("$result=="$this.getWidth()*$this.getWidth()")
\end_layout

\begin_layout Plain Layout

		public int getArea() {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@ensures({"$this.getX()==$old($this.getX())+x",
\end_layout

\begin_layout Plain Layout

			""$this.getY()==$old($this.getY())+y"")
\end_layout

\begin_layout Plain Layout

		public void move(int x, int y) {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This example features all the different constructs that can be accessed
 from a contract:
\end_layout

\begin_layout Description

\family typewriter
$this
\family default
 The this object (You currently can't use the this object implicitly yet..)
\end_layout

\begin_layout Description

\family typewriter
parameters
\family default
 You can simply access method/advice parameters via their name
\end_layout

\begin_layout Description

\family typewriter
$result
\family default
 The return value of a method/advice, available in postconditions
\end_layout

\begin_layout Description

\family typewriter
$old(expr)
\family default
 The old function evaluates an expression before the method/advice is executed,
 stores the result, such that it is available in postconditions.
 This is useful if, for example, you want to compare the old value of a
 field with the new value.
\end_layout

\begin_layout Standard
With contract enforcement enabled, contracts are checked at runtime, as
 well as whether methods/advice are adhering to the Liskov/advice substitution
 principle.
 (For more information on Liskov substitution, just have a look at 
\begin_inset CommandInset href
LatexCommand href
name "Wikipedia"
target "http://en.wikipedia.org/wiki/Liskov_substitution_principle"

\end_inset

.
 For more information on advice substitution, which is essentially Liskov
 substitution for aspects, have a look at section 3 in the paper 
\begin_inset CommandInset href
LatexCommand href
name "\"Design by Contract for Aspects, by Aspects\""
target "http://dl.acm.org/citation.cfm?id=2162015"

\end_inset

.) Whenever a contract is broken, a 
\family typewriter
ContractEnforcementException
\family default
 is thrown, indicating which part of the contract was broken, and who is
 to blame.
\end_layout

\begin_layout Section*
Configuration
\end_layout

\begin_layout Standard
To tweak the impact that adbc has on program performance, the library can
 be configured by modifying the static fields in the 
\family typewriter
AdbcConfig
\family default
 class.
 You can alter these fields at any time to disable contract enforcement
 entirely, disable postcondition checking or disable substitution principle
 checking.
\end_layout

\begin_layout Section*
Troubleshooting
\end_layout

\begin_layout Itemize
In case Eclipse throws an exception if you try to include 
\family typewriter
adbc.jar
\family default
 to the AspectJ build path, you can get around this problem by simply putting
 the adbc source code into your project instead.
 This seems due to an AJDT bug similar to 
\begin_inset CommandInset href
LatexCommand href
name "#244300"
target "https://bugs.eclipse.org/bugs/show_bug.cgi?id=244300"

\end_inset

.
 Note that you may be able to include 
\family typewriter
adbc.jar
\family default
 on the Aspect Path instead of the Inpath, but then you will only get contract
 enforcement on classes, not aspects.
\end_layout

\begin_layout Itemize
If parameter names are not available in contracts, try passing the "-g:var"
 command-line parameter to the compiler.
 (This should be enabled by default when using AJDT.) Otherwise, if parameter
 names cannot be retrieved, you can use "arg0", "arg1", ..
 instead.
\end_layout

\begin_layout Section*
Caveats
\end_layout

\begin_layout Itemize
Keep in mind adbc is currently still a proof of concept.
 This means some basic features are still missing: attaching invariants
 directly to fields, inheriting contracts from the super class or the advised
 join point.
 The performance of adbc could also be vastly improved with some caching.
\end_layout

\begin_layout Itemize
The advice substitution principle cannot be enforced yet on higher-order
 advice (advice that advises advice..), unless this advice accesses the non-static
 part of the 
\family typewriter
thisjoinpoint
\family default
 object.
 Our contract enforcement advice needs access to that object, but it is
 created lazily by the higher-order advice, so it may or may not be available..
\end_layout

\begin_layout Itemize
Checking Liskov substitution currently assumes that overridding methods
 use the same parameter names as the overridden method.
 (This could be solved using the Paranamer library..)
\end_layout

\begin_layout Itemize
There is basic support for the 
\family typewriter
@advisedBy
\family default
 annotation/clause, but a few things could be improved:
\end_layout

\begin_deeper
\begin_layout Itemize
An advice mentioned in an 
\family typewriter
@advisedBy
\family default
 clause has to be mentioned by its canonical name.
 It would be nicer if you could use its simple name (+ an import statement).
\end_layout

\begin_layout Itemize
If multiple advice are mentioned in an 
\family typewriter
@advisedBy
\family default
 clause, and when resolving the 
\family typewriter
$proc
\family default
 variable, we assume that the advice mentioned in the clause use the same
 parameter names as the join point they advise.
 (Should be possible to figure out the mapping from the advice's names to
 those used by the join point..
 Could be done by examining the advice's pointcut, but I'd rather not re-invent
 parts of the AspectJ compiler..)
\end_layout

\begin_layout Itemize
If an advice's pointcut 
\end_layout

\begin_layout Itemize
If multiple advice are mentioned in an 
\family typewriter
@advisedBy
\family default
 clause, we do not enforce the ordering of the listed advice, but assume
 this is done by a separate declare precedence statement.
\end_layout

\begin_layout Itemize
Even though advice can have names (using an 
\family typewriter
@AdviceName
\family default
 annotation), AspectJ currently does not support overriding advice, so it's
 not possible either to make use of them in an 
\family typewriter
@advisedBy
\family default
 clause..
\end_layout

\end_deeper
\begin_layout Section*
Contact
\end_layout

\begin_layout Standard
If you have any questions, suggestions or other feedback, feel free to contact
 me at tim.molderez@ua.ac.be.
 
\end_layout

\end_body
\end_document
