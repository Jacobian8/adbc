#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{xcolor}
\hypersetup{colorlinks,
  urlcolor=[HTML]{268BD2},
  linkcolor=[HTML]{DC322F},
  citecolor=[HTML]{859900}
}

\definecolor{solarized-blue}{HTML}{268BD2}

\input{listings}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans cmbr
\font_typewriter beramono
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 80

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "adbc documentation"
\pdf_author "Tim Molderez"
\pdf_bookmarks false
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 4cm
\rightmargin 3cm
\bottommargin 4cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
textcolor{solarized-blue}{
\end_layout

\end_inset

adbc - Design by Contract for AspectJ
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Date
User manual - version 0.2
\end_layout

\begin_layout Standard
Adbc is a small and lightweight library that adds support for 
\begin_inset CommandInset href
LatexCommand href
name "design by contract"
target "http://en.wikipedia.org/wiki/Design_by_contract"

\end_inset

 to the AspectJ programming language.
 The library essentially consists of a number of aspects that monitor your
 contracts at runtime and will throw an exception whenever a contract is
 broken.
\end_layout

\begin_layout Section*
Requirements
\end_layout

\begin_layout Itemize
Java 6 (or later)
\end_layout

\begin_layout Itemize
AspectJ (tested on versions 1.6.12 and 1.7.2) are required
\end_layout

\begin_layout Section*
Installation
\end_layout

\begin_layout Standard
Include 
\family typewriter
adbc.jar
\family default
 on the build path of your AspectJ project and contract enforcement should
 be enabled automatically.
 If you're using Eclipse+AJDT, this is done as follows:
\end_layout

\begin_layout Itemize
Right-click your AspectJ project and go to 
\begin_inset Quotes eld
\end_inset

Properties
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Go to 
\begin_inset Quotes eld
\end_inset

AspectJ Build
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

InPath
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Itemize
Click the 
\begin_inset Quotes eld
\end_inset

Add (External) JARs...
\begin_inset Quotes erd
\end_inset

 button and select the 
\family typewriter
adbc.jar
\family default
 file.
\begin_inset Newline newline
\end_inset

(If an exception is thrown, check the 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Troubleshooting"

\end_inset

 section.)
\end_layout

\begin_layout Itemize
Close the Properties window with the OK button.
 You can now start writing contracts using the annotations available in
 the 
\family typewriter
be.ac.ua.ansymo.adbc.annotations
\family default
 package.
\end_layout

\begin_layout Standard
Note that, because the aspects of adbc can advise 
\emph on
any
\emph default
 method call and advice execution, you probably want to hide AJDT's advice
 markers for those aspects.
 You can do this by right-clicking your AspectJ project, then go to 
\begin_inset Quotes eld
\end_inset

AspectJ Tools
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Configure advice markers...
\begin_inset Quotes erd
\end_inset

.
 Finally set the icon for all aspects in the 
\family typewriter
be.ac.ua.ansymo.adbc
\family default
 package to None.
\end_layout

\begin_layout Standard
If you'd like to tinker with adbc on a small toy project before enabling
 it on your own projects, have a look at the included example in the 
\family typewriter
adbc/source/src/be/ac/ua/ansymo/example_bank
\family default
 folder.
\end_layout

\begin_layout Section*
Usage
\end_layout

\begin_layout Standard
Contracts in adbc are specified using Java annotations.
 Adbc makes use of the following annotations:
\end_layout

\begin_layout Description

\family typewriter
@requires
\family default
 Specifies the preconditions of a method, a constructor or an advice.
 This annotation takes one or more strings as its value, where each string
 is a contract specified as a boolean expression
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
By default, contracts are JavaScript expressions.
 Other languages can be used by changing the scripting engine.
\end_layout

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
@ensures
\family default
 Specifies the postconditions of a method, a constructor or an advice.
\end_layout

\begin_layout Description

\family typewriter
@invariant
\family default
 Specifies the invariants of a class or an aspect.
\end_layout

\begin_layout Description

\family typewriter
@advisedBy
\family default
 Specifies that a method 
\emph on
expects
\emph default
 to be advised by the listed advice, in the given order.
 This annotation can only be attached to methods, and has one or more strings
 as its value.
 Each string should contain the canonical/absolute name of an advice.
 Note that an 
\family typewriter
@advisedBy
\family default
 annotation on a method is implicitly inherited by any overriding methods
 in subclasses.
\end_layout

\begin_layout Description

\family typewriter
@pointcutRuntimeTest
\family default
 If an advice is mentioned in an 
\family typewriter
@advisedBy
\family default
 annotation, and its pointcut contains constructs that can only be determined
 at runtime (e.g.
 
\family typewriter
if
\family default
, 
\family typewriter
cflow
\family default
), you should attach this annotation to the advice and copy these runtime
 tests into the annotation's value.
 (This information is completely redundant, but adbc currently makes use
 of this annotation because all pointcut-related information is lost after
 weaving.)
\end_layout

\begin_layout Description

\family typewriter
@AdviceName
\family default
 This annotation is part of AspectJ itself, and is used to give a name to
 an advice.
 An advice is required to have a name if you want to mention it in an 
\family typewriter
@advisedBy
\family default
 annotation.
\end_layout

\begin_layout Standard
When writing contracts, the following variables and functions are available:
\end_layout

\begin_layout Description

\family typewriter
$this
\family default
 The this object
\end_layout

\begin_layout Description

\family typewriter
parameters
\family default
 You can simply access method/advice parameters via their name
\end_layout

\begin_layout Description

\family typewriter
$result
\family default
 The return value of a method/advice, available in postconditions
\end_layout

\begin_layout Description

\family typewriter
$old(expr)
\family default
 The old function evaluates an expression before the method/advice is executed,
 stores the result, such that it is available in postconditions.
 This is useful if, for example, you want to compare the old value of a
 field with the new value.
\end_layout

\begin_layout Description

\family typewriter
$proc
\family default
 Depending on whether this keyword is used in the pre-or postconditions
 of an around advice, 
\family typewriter
$proc
\family default
 usually refers to the pre-or postconditions of the method being advised.
 In general, 
\family typewriter
$proc
\family default
 refers to the pre-or postconditions of the body that you *know* will be
 executed next when making a proceed call.
 The emphasis on *know* indicates that you should only be aware of any advice
 that have been mentioned explicitly in an 
\family typewriter
@advisedBy
\family default
 annotation of the advised method.
\end_layout

\begin_layout Standard
With contract enforcement enabled, contracts are checked at runtime, guided
 by 
\begin_inset CommandInset href
LatexCommand href
name "behavioural subtyping"
target "http://en.wikipedia.org/wiki/Liskov_substitution_principle"

\end_inset

 and the 
\begin_inset CommandInset href
LatexCommand href
name "advice substitution principle"
target "http://dl.acm.org/citation.cfm?id=2162015"

\end_inset

.
 (See the 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Modular-reasoning"

\end_inset

 section for more information.) Whenever a contract is broken, a 
\family typewriter
ContractEnforcementException
\family default
 is thrown, indicating which part of the contract was broken, and who is
 to blame.
\end_layout

\begin_layout Section*
\begin_inset CommandInset label
LatexCommand label
name "sec:Modular-reasoning"

\end_inset

Modular reasoning
\end_layout

\begin_layout Standard
Modular reasoning is about the ability to reason about a method call by
 just looking at the method body's contracts (in the static type).
 In practical terms, it should be sufficient to inspect the tooltip you
 get when hovering over a method call in Eclipse.
 (In particular, that tooltip also includes the method body's contracts,
 since its annotations are displayed.) These contracts should be sufficient,
 in the sense that you can rely on them to be the minimum requirements and
 guarantees that will actually hold at runtime.
\end_layout

\begin_layout Standard
However, like most good things, modular reasoning is not something you get
 for free.
 Modular reasoning is not automatically guaranteed by Java, and certainly
 not by AspectJ.
 In Java, a method call might behave differently from what you expect.
 The method body being executed at runtime (in the dynamic type) could be
 different from the method body that you expected (in the static type).
 Java by itself does not prevent you from implementing completely different
 behaviour in an overriding method, compared to the behaviour of the overridden
 method.
\end_layout

\begin_layout Standard
To obtain modular reasoning in Java, there are some 
\begin_inset Quotes eld
\end_inset


\series bold
behavioural subtyping
\series default

\begin_inset Quotes erd
\end_inset

 rules you need to take into account when implementing a class:
\end_layout

\begin_layout Itemize
The preconditions of methods should be equal to or weaker than those in
 the supertype.
\end_layout

\begin_layout Itemize
The postconditions of methods should be equal to or stronger than those
 in the supertype.
 
\begin_inset Newline newline
\end_inset

(However, this constraint 
\emph on
only
\emph default
 applies if the precondition of the supertype held in the pre-state.
 If it did not hold, you know that the static type cannot be the supertype
 or any other ancestor, so you can't 
\begin_inset Quotes eld
\end_inset

surprise
\begin_inset Quotes erd
\end_inset

 the caller even if the postcondition is weaker than the supertype.)
\end_layout

\begin_layout Itemize
Invariants of the supertype must be preserved.
\end_layout

\begin_layout Standard
If a class is unable to comply with these rules, you can always write a
 wrapper class around whichever class you'd like to extend instead.
 (..
 though you lose the benefit of being able to substitute for that class.)
\end_layout

\begin_layout Standard
Modular reasoning in AspectJ presents some additional complexity: Not only
 can the dynamic type differ from the static type at a method call, but
 an advice could also completely change the behaviour of that method call.
 Luckily, there is a very similar set of rules for writing advice, called
 the 
\series bold
advice substitution principle
\series default
 (ASP).
 Note that, if we refer to 
\begin_inset Quotes eld
\end_inset

contracts of an advised join point
\begin_inset Quotes erd
\end_inset

, this refers to the contracts of the method body in the static type of
 an advised method call.
 (This also applies to advice that matches on execution join points; they
 modify the behaviour of method calls just the same..)
\end_layout

\begin_layout Itemize
The preconditions of the advice should be equal to or weaker than those
 of the join points it advises.
\end_layout

\begin_layout Itemize
The postconditions of the advice should be equal to or stronger than those
 of the join points it advises.
 (Again, this constraint only applies if the precondition of the advised
 join point held in the pre-state.)
\end_layout

\begin_layout Itemize
Invariants of the advised join points must be preserved.
\end_layout

\begin_layout Standard
The above rules apply to around advice.
 Since the contracts of before/after advice do not include the effects of
 their implicit proceed call, there are some small differences in their
 ASP rules.
 In case of 
\series bold
before
\series default
 advice:
\end_layout

\begin_layout Itemize
The preconditions of the advice should be equal to or weaker than those
 of the join points it advises.
\end_layout

\begin_layout Itemize
If the preconditions of the advised join points held before executing the
 advice, they should still hold at the end of the advice.
\end_layout

\begin_layout Itemize
Invariants of the advised join points must be preserved.
\end_layout

\begin_layout Standard
In case of 
\series bold
after
\series default
 advice:
\end_layout

\begin_layout Itemize
The preconditions of the advice should be equal to or weaker than the 
\emph on
post
\emph default
conditions of the advised join point.
\end_layout

\begin_layout Itemize
If the postconditions of the advised join point held before executing the
 advice, they should still hold at the end of the advice.
\end_layout

\begin_layout Itemize
Invariants of the advised join points must be preserved.
\end_layout

\begin_layout Standard
In case an advice is unable to comply with the ASP, this means the advice
 cannot help but create surprising behaviour that was not expected by the
 caller of an advised method.
 To avoid such surprises, we should make the caller aware of the advice
 somehow.
 This is done in adbc by means of the 
\family typewriter
@advisedBy
\family default
 annotation.
 If an advice is non-ASP-compliant, it should add its name to an 
\family typewriter
@advisedBy
\family default
 annotation in all of its join point shadows.
 In other words, the advice name should be visible in all method bodies
 it advises.
 (Note that the 
\family typewriter
@advisedBy
\family default
 annotation is automatically inherited by subclasses.) If one of these methods
 is ever called, the caller will notice the 
\family typewriter
@advisedBy
\family default
 annotation and is aware the method's contracts are altered by the advice
 listed in an 
\family typewriter
@advisedBy
\family default
 annotation.
\end_layout

\begin_layout Standard
In summary, this is adbc's approach to modular reasoning in AspectJ:
\end_layout

\begin_layout Itemize
When implementing classes, try to take into account the behavioural subtyping
 rules.
 If this is not possible, write a wrapper class instead.
\end_layout

\begin_layout Itemize
When implementing advice, try to take into account the rules of the ASP.
\end_layout

\begin_layout Itemize
If an advice cannot comply with the ASP, the advice's name should be mentioned
 in an 
\family typewriter
@advisedBy
\family default
 annotation at the join point shadows.
\end_layout

\begin_deeper
\begin_layout Itemize
The pointcut of a non-ASP-compliant advice may not include execution join
 points.
 (You can only determine at runtime which method calls are affected by advice
 on execution join points.
 As such, it's unclear where to put the 
\family typewriter
@advisedBy
\family default
 annotations for such advice.)
\end_layout

\begin_layout Itemize
If multiple non-ASP-compliant advice are advising the same join point, they
 should be executed in the order specfied by the 
\family typewriter
@advisedBy
\family default
 annotation of the join point.
 When making a proceed call, a non-ASP-compliant advice must also be aware
 of the advice that follow it in the 
\family typewriter
@advisedBy
\family default
 annotation.
\end_layout

\begin_layout Itemize
If ASP-compliant and non-ASP-compliant advice are advising the same join
 point, the non-ASP-compliant advice get higher precedence.
 (This is because ASP-compliant advice do not have to take into account
 the contracts of other advice that share some of its join points.)
\end_layout

\end_deeper
\begin_layout Section*
Examples
\end_layout

\begin_layout Subsection*
Writing contracts for classes
\end_layout

\begin_layout Standard
The following example of a simple 
\family typewriter
Square
\family default
 class demonstrates the basic syntax of contracts:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},language=AspectJ,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

@invariant("$this.getWidth()==$this.getHeight()")
\end_layout

\begin_layout Plain Layout

class Square {
\end_layout

\begin_layout Plain Layout

		@requires("s > 0"})
\end_layout

\begin_layout Plain Layout

		@ensures({"$this.getHeight()==s", "$this.getWidth()==s"})
\end_layout

\begin_layout Plain Layout

		public void setSize(int s) {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@ensures("$result==$this.getWidth()*$this.getWidth()")
\end_layout

\begin_layout Plain Layout

		public int getArea() {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@ensures({"$this.getX()==$old($this.getX())+x",
\end_layout

\begin_layout Plain Layout

			"$this.getY()==$old($this.getY())+y")
\end_layout

\begin_layout Plain Layout

		public void move(int x, int y) {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that a contract can consist of multiple parts.
 For example, the postcondition of 
\family typewriter
setSize()
\family default
 consists of parts 
\family typewriter
$this.getHeight()==s
\family default
 and 
\family typewriter
$this.getWidth()==s
\family default
.
 This is equivalent to 
\family typewriter
$this.getHeight()==s && $this.getWidth()==s
\family default
.
 The benefit of writing a contract in multiple parts is: if a contract is
 broken, we can pinpoint which part was broken, which is more useful than
 just stating 
\begin_inset Quotes eld
\end_inset

this contract was broken
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection*
Writing contracts for ASP-compliant aspects
\end_layout

\begin_layout Standard
The following is an example of a simple caching advice.
 Its preconditions are the same as those of the join point it advises.
 The postconditions are slightly stronger, due to the addition of 
\family typewriter
isCached(i,val)
\family default
.
 Consequently, the advice satisfies the advice substitution principle.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},language=AspectJ,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

aspect ListCache {
\end_layout

\begin_layout Plain Layout

	@requires("$proc"})
\end_layout

\begin_layout Plain Layout

	@ensures("$proc && isCached(i,val)")
\end_layout

\begin_layout Plain Layout

	void around(int i, Object val): 
\end_layout

\begin_layout Plain Layout

			call(void List.set(int, Object)) && args(i, val) {
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Writing contracts for advice isn't all that different from writing contracts
 for methods.
 What is mainly interesting here is the use of the 
\family typewriter
$proc
\family default
 keyword.
 In the precondition, it refers to the preconditions of 
\family typewriter
List.set()
\family default
.
 Note that the pointcut could potentially also match on an overridden version
 of 
\family typewriter
List.set()
\family default
.
 If this is the case, the advice should technically also take into account
 the preconditions of overridden versions, as calls to those methods are
 advised as well.
 Likewise, the 
\family typewriter
$proc
\family default
 keyword in the postcondition refers to the postconditions of 
\family typewriter
List.set
\family default
() (or an overridden version).
\end_layout

\begin_layout Subsection*
Writing contracts for non-ASP-compliant aspects
\end_layout

\begin_layout Standard
The following is an example of an authentication advice that does not satisfy
 the advice substitution principle.
 This is because the postcondition is 
\family typewriter
true
\family default
 if the user is not logged in, which clearly is weaker than the postcondition
 of 
\family typewriter
Account.transfer()
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},language=AspectJ,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

public aspect Authentication {
\end_layout

\begin_layout Plain Layout

	@requires("$proc")
\end_layout

\begin_layout Plain Layout

	@ensures({"from.getOwner().isLoggedIn()?$proc:true"})
\end_layout

\begin_layout Plain Layout

	@AdviceName("authenticate")
\end_layout

\begin_layout Plain Layout

	void around(Account from, double amount, Account to):
\end_layout

\begin_layout Plain Layout

			call(void Account.transfer(double, Account))
\end_layout

\begin_layout Plain Layout

			&& args(amount, to) && target(from) {
\end_layout

\begin_layout Plain Layout

		if (from.getOwner().isLoggedIn()) {
\end_layout

\begin_layout Plain Layout

			proceed(from, amount, to);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because this advice does not satisfy the advice substitution principle,
 it could cause surprises for anyone calling 
\family typewriter
Account.transfer()
\family default
.
 More specifically, if the user is not logged in, nothing will happen.
 If this outcome is not specified in 
\family typewriter
Account.transfer()
\family default
, 
\begin_inset Quotes eld
\end_inset

nothing
\begin_inset Quotes erd
\end_inset

 isn't exactly what we expected to happen when calling 
\family typewriter
transfer
\family default
.
\end_layout

\begin_layout Standard
However, we can restore modular reasoning by adding an 
\family typewriter
@advisedBy
\family default
 annotation to the join point shadows of the authentication advice.
 In this case, we'll add the annotation to the 
\family typewriter
Account.transfer()
\family default
 method:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},language=AspectJ,showstringspaces=false,tabsize=2"
inline false
status open

\begin_layout Plain Layout

public class Account{
\end_layout

\begin_layout Plain Layout

	@requires({"amount>0", "to!=null"})
\end_layout

\begin_layout Plain Layout

	@ensures({"$this.getAmount()==$old($this.getAmount())-amount",
\end_layout

\begin_layout Plain Layout

		"to.getAmount()==$old(to.getAmount())+amount"})
\end_layout

\begin_layout Plain Layout

	@advisedBy({"com.bankapp.aspects.Authentication.authenticate"
\end_layout

\begin_layout Plain Layout

	,"com.bankapp.aspects.Authorization.authorize"})
\end_layout

\begin_layout Plain Layout

	public void transfer(double amount, Account to) {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this example, the 
\family typewriter
@advisedBy
\family default
 annotation in 
\family typewriter
Account.transfer()
\family default
 mentions two advice: 
\family typewriter
authenticate
\family default
 and 
\family typewriter
authorize
\family default
.
 (Note that any advice in an 
\family typewriter
@advisedBy
\family default
 annotation must have a name, i.e.
 an @AdviceName annotation.) Adding this 
\family typewriter
@advisedBy
\family default
 annotation means that the 
\family typewriter
transfer
\family default
 method is expecting to be advised by these two advice in the given precedence/o
rder.
 The 
\family typewriter
@advisedBy
\family default
 annotation is now part of 
\family typewriter
Account.transfer()
\family default
's contracts, and anyone who wishes to call this method should now be aware
 of the advice mentioned in the annotation, and their contracts.
 
\end_layout

\begin_layout Standard
In effect, when calling 
\family typewriter
transfer
\family default
, you should now ensure the preconditions of 
\family typewriter
authenticate
\family default
.
 However, note that any use of the 
\family typewriter
$proc
\family default
 keyword in 
\family typewriter
authenticate
\family default
 will refer to the preconditions of the next advice in the 
\family typewriter
@advisedBy
\family default
 annotation, i.e.
 
\family typewriter
authorize
\family default
's preconditions.
 In turn, the 
\family typewriter
$proc
\family default
 keyword in 
\family typewriter
authorize
\family default
's preconditions will refer to 
\family typewriter
transfer
\family default
's preconditions.
 In this sense, every advice mentioned in the 
\family typewriter
@advisedBy
\family default
 clause is can be viewed as a sort-of wrapper around the preconditions of
 
\family typewriter
transfer
\family default
.
 The same logic also applies to the postconditions and invariants when calling
 
\family typewriter
transfer
\family default
.
\end_layout

\begin_layout Standard
Finally, I should also mention that these 
\family typewriter
@advisedBy
\family default
 annotations are automatically inherited by subclasses.
 This means that you don't have to add the annotation again when overriding
 the 
\family typewriter
transfer
\family default
 method.
\end_layout

\begin_layout Section*
Configuration
\end_layout

\begin_layout Standard
Adbc exposes a few configuration options, such as enabling/disabling contract
 enforcement, whether or not postconditions or the substitution principle
 should be checked, or which scripting engine should be used to evaluate
 contracts.
 These options can be configured by simply modifying the static fields in
 the 
\family typewriter
AdbcConfig
\family default
 class at any time.
\end_layout

\begin_layout Section*
\begin_inset CommandInset label
LatexCommand label
name "sec:Troubleshooting"

\end_inset

Troubleshooting
\end_layout

\begin_layout Itemize
In case Eclipse throws an exception if you try to include 
\family typewriter
adbc.jar
\family default
 to the AspectJ build path, you can get around this problem by simply putting
 the adbc source code into your project instead.
 This seems due to an AJDT bug similar to 
\begin_inset CommandInset href
LatexCommand href
name "#244300"
target "https://bugs.eclipse.org/bugs/show_bug.cgi?id=244300"

\end_inset

.
 Note that you may be able to include 
\family typewriter
adbc.jar
\family default
 on the Aspect Path instead of the Inpath, but then you will only get contract
 enforcement on classes, not aspects.
\end_layout

\begin_layout Itemize
If parameter names are not available in contracts, try passing the "-g:var"
 command-line parameter to the compiler.
 (This should be enabled by default when using AJDT.) Otherwise, if parameter
 names cannot be retrieved, you can use "arg0", "arg1", ..
 instead.
\end_layout

\begin_layout Section*
\begin_inset CommandInset label
LatexCommand label
name "sec:Caveats"

\end_inset

Caveats
\end_layout

\begin_layout Itemize
Keep in mind that adbc is currently still a proof of concept.
 This means some basic features are still missing: 
\end_layout

\begin_deeper
\begin_layout Itemize
Invariants can only be attached to a class or aspect, not directly to a
 field.
\end_layout

\begin_layout Itemize
There is no construct yet to easily inherit contracts from a super class
 when writing the contracts of an overriding method.
\end_layout

\begin_layout Itemize
The performance of adbc has lots of room for improvement.
 (caching, pointcuts not relying on cflow, avoid relying on the dynamic
 parts of 
\family typewriter
thisjoinpoint
\family default
, ..)
\end_layout

\begin_layout Itemize
There is no syntactic sugar to make 
\family typewriter
$this
\family default
 implicit in method calls; it should always be mentioned explicitly.
\end_layout

\end_deeper
\begin_layout Itemize
The advice substitution principle cannot be enforced yet on higher-order
 advice (advice that advises advice..), unless this advice accesses the non-static
 part of the 
\family typewriter
thisjoinpoint
\family default
 object.
 (Our contract enforcement advice needs access to that object, but it is
 created lazily by the higher-order advice, so it may or may not be available..)
\end_layout

\begin_layout Itemize
Checking behavioural subtyping currently assumes that overriding methods
 use the same parameter names as the overridden method.
 (This could be solved using e.g.
 the Paranamer library..)
\end_layout

\begin_layout Itemize
There is basic support for the 
\family typewriter
@advisedBy
\family default
 annotation, but several things can be improved:
\end_layout

\begin_deeper
\begin_layout Itemize
An advice mentioned in an 
\family typewriter
@advisedBy
\family default
 annotation has to be mentioned by its absolute/canonical name.
 It would be nicer if you could use its simple name (+ an import statement).
\end_layout

\begin_layout Itemize
If multiple advice are mentioned in an 
\family typewriter
@advisedBy
\family default
 annotation:
\end_layout

\begin_deeper
\begin_layout Itemize
We do not enforce the ordering of the listed advice, but assume this is
 done by a separate 
\family typewriter
declare precedence
\family default
 statement.
\end_layout

\begin_layout Itemize
When resolving the 
\family typewriter
$proc
\family default
 variable, we assume that the advice mentioned in the 
\family typewriter
@advisedBy
\family default
 annotation use the same parameter names as the join point they advise.
 (Should be possible to figure out the mapping from the advice's names to
 those used by the join point..
 Could be done by examining the advice's pointcut, but I'd rather not re-invent
 parts of the AspectJ compiler..)
\end_layout

\begin_layout Itemize
If an advice is mentioned in an 
\family typewriter
@advisedBy
\family default
 annotation and its pointcut makes use of constructs that can only be determined
 at runtime, like 
\family typewriter
cflow
\family default
 or 
\family typewriter
if
\family default
, you'll currently need to copy them into a 
\family typewriter
@pointcutRuntimeTest
\family default
 annotation attached to the advice.
 This is needed to determine the effective specification of methods that
 mention such an advice in their 
\family typewriter
@advisedBy
\family default
 annotation.
 The 
\family typewriter
@pointcutRuntimetest
\family default
 annotation is technically redundant information, but it's tricky to fix
 this since there's currently no such thing as a reflection API for pointcuts..
 Another option would be to compile the effective specifications as a preprocess
ing step, as it can be done statically given the source code..
\end_layout

\end_deeper
\begin_layout Itemize
Even though advice can have names (using an 
\family typewriter
@AdviceName
\family default
 annotation), AspectJ currently does not support overriding advice, so it's
 of course not possible either to make use of this feature in an 
\family typewriter
@advisedBy
\family default
 annotation..
 (The 
\family typewriter
@advisedBy
\family default
 annotation could expect a certain aspect, but at runtime a subaspect could
 fill in that role just the same.)
\end_layout

\end_deeper
\begin_layout Section*
Release notes
\end_layout

\begin_layout Itemize
Version 0.2
\end_layout

\begin_deeper
\begin_layout Itemize
If an advice cannot comply with the advice substitution principle, modular
 reasoning can be restored with the 
\family typewriter
@advisedBy
\family default
 annotation
\end_layout

\begin_layout Itemize
An advice can refer to the contracts of the advised join point with the
 
\family typewriter
$proc
\family default
 keyword
\end_layout

\begin_layout Itemize
Configurable scripting engine + configurable variable prefix (i.e.
 the dollar sign in 
\family typewriter
$this
\family default
, 
\family typewriter
$result
\family default
, etc.) This feature was mainly added so you can switch to the Groovy interpreter
, which allows you to access private members in contracts, if desired.
 An identifier starting with a dollar sign is invalid in Groovy however,
 which is why you can change it to some other symbol..
\end_layout

\begin_layout Itemize
More information is shown when a contract is broken (e.g.
 where in the source code is the contract that was broken)
\end_layout

\begin_layout Itemize
Support for contracts on constructors
\end_layout

\end_deeper
\begin_layout Itemize
Version 0.1
\end_layout

\begin_deeper
\begin_layout Itemize
Initial release
\end_layout

\begin_layout Itemize
Basic support for preconditions, postconditions and invariants
\end_layout

\begin_layout Itemize
Enforces behavioural subtyping for classes, the advice substitution principle
 for advice
\end_layout

\end_deeper
\begin_layout Section*
Contact
\end_layout

\begin_layout Standard
If you have any questions, suggestions or other feedback, feel free to contact
 me at 
\begin_inset CommandInset href
LatexCommand href
target "tim.molderez@ua.ac.be"
type "mailto:"

\end_inset

.
 
\end_layout

\end_body
\end_document
