#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans cmbr
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 4cm
\rightmargin 3cm
\bottommargin 4cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\color cyan
adbc - Design by Contract for AspectJ
\end_layout

\begin_layout Date
User manual - version 0.1
\end_layout

\begin_layout Standard
Adbc is a small and lightweight library that adds support for Design by
 Contract to the AspectJ programming language.
 The library essentially consists of a number of aspects that monitor your
 contracts at runtime and will throw an exception whenever a contract is
 broken.
\end_layout

\begin_layout Section*
Requirements
\end_layout

\begin_layout Itemize
Java 6 (or later)
\end_layout

\begin_layout Itemize
AspectJ (tested on versions 1.6.12 and 1.7.2) are required
\end_layout

\begin_layout Section*
Installation
\end_layout

\begin_layout Standard
Include 
\family typewriter
adbc.jar
\family default
 on the build path of your AspectJ project and contract enforcement should
 be enabled automatically.
 More specifically, if you are using Eclipse+AJDT:
\end_layout

\begin_layout Itemize
Right-click your AspectJ project and go to 
\begin_inset Quotes eld
\end_inset

Properties
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Go to 
\begin_inset Quotes eld
\end_inset

AspectJ Build
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

InPath
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Itemize
Click the 
\begin_inset Quotes eld
\end_inset

Add (External) JARs...
\begin_inset Quotes erd
\end_inset

 button.
 (See the 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Caveats"

\end_inset

 section if an exception is thrown.)
\end_layout

\begin_layout Standard
Note that, because the aspects of adbc can advise any method call and advice
 execution, you probably want to hide its advice markers.
 You can do this in AJDT by right-clicking any advice marker, then go to
 
\begin_inset Quotes eld
\end_inset

AspectJ Tools
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Configure advice markers...
\begin_inset Quotes erd
\end_inset

.
 Just set the icon for all aspects in the 
\family typewriter
be.ac.ua.ansymo.adbc
\family default
 package to None.
\end_layout

\begin_layout Standard
If you want to tinker with adbc on a small toy project before enabling it
 on your own projects, just have a look at the included example in the 
\family typewriter
adbc/source/src/be/ac/ua/ansymo/example_bank
\family default
 folder.
\end_layout

\begin_layout Section*
Usage
\end_layout

\begin_layout Standard
Contracts are specified as Java annotations.
 Adbc makes use of the following annotations:
\end_layout

\begin_layout Description

\family typewriter
@requires
\family default
 Specifies the preconditions of a method, a constructor or an advice.
 This annotation takes one or more strings as its value, where each string
 is a contract specified as a boolean expression
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
By default, this boolean expression is written in Javascript, though other
 languages can be used by changing the scripting engine.
\end_layout

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
@ensures
\family default
 Specifies the postconditions of a method, a contstructor or an advice.
\end_layout

\begin_layout Description

\family typewriter
@invariant
\family default
 Specifies the invariants of a class or an aspect.
\end_layout

\begin_layout Description

\family typewriter
@advisedBy
\family default
 Specifies that a method 
\emph on
expects
\emph default
 to be advised by the listed advice, in the given order.
 This annotation can only be attached to methods, and has one or more strings
 as its value.
 Each string should contain the canonical/absolute name of an advice.
 Note that an 
\family typewriter
@advisedBy
\family default
 annotation on a method is implicitly inherited by any overriding methods
 in subclasses.
\end_layout

\begin_layout Description

\family typewriter
@pointcutRuntimeTest
\family default
 If an advice is mentioned in an 
\family typewriter
@advisedBy
\family default
 clause, and its pointcut contains constructs that can only be determined
 at runtime (e.g.
 
\family typewriter
if
\family default
, 
\family typewriter
cflow
\family default
), you should attach this annotation to the advice and copy these runtime
 tests into the annotation's value.
 (This information is completely redundant, but adbc currently makes use
 of this annotation because all pointcut-related information is lost after
 weaving.)
\end_layout

\begin_layout Description

\family typewriter
@AdviceName
\family default
 This annotation is part of AspectJ itself, and is used to give a name to
 an advice.
 An advice is required to have a name if you want to mention it in an 
\family typewriter
@advisedBy
\family default
 annotation.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The contracts themselves are written in the form of Javascript expressions,
 as a String parameter of the annotation.
 If a contract consists of multiple parts, you can also pass an array of
 Strings.
\end_layout

\end_inset

The following example of a simple 
\family typewriter
Square
\family default
 class demonstrates the syntax of contracts:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},tabsize=2"
inline false
status open

\begin_layout Plain Layout

@invariant("$this.getWidth()==$this.getHeight()")
\end_layout

\begin_layout Plain Layout

class Square {
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@requires("s > 0"})
\end_layout

\begin_layout Plain Layout

		@ensures({"$this.getHeight()==s", "$this.getWidth()==s"})
\end_layout

\begin_layout Plain Layout

		public void setSize(int s) {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@ensures("$result=="$this.getWidth()*$this.getWidth()")
\end_layout

\begin_layout Plain Layout

		public int getArea() {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		@ensures({"$this.getX()==$old($this.getX())+x",
\end_layout

\begin_layout Plain Layout

			"$this.getY()==$old($this.getY())+y")
\end_layout

\begin_layout Plain Layout

		public void move(int x, int y) {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This example features some of the different constructs that can be accessed
 from a contract:
\end_layout

\begin_layout Description

\family typewriter
$this
\family default
 The this object (You currently can't use the this object implicitly yet..)
\end_layout

\begin_layout Description

\family typewriter
parameters
\family default
 You can simply access method/advice parameters via their name
\end_layout

\begin_layout Description

\family typewriter
$result
\family default
 The return value of a method/advice, available in postconditions
\end_layout

\begin_layout Description

\family typewriter
$old(expr)
\family default
 The old function evaluates an expression before the method/advice is executed,
 stores the result, such that it is available in postconditions.
 This is useful if, for example, you want to compare the old value of a
 field with the new value.
\end_layout

\begin_layout Description

\family typewriter
$proc
\family default
 Depending on whether this keyword is used in the pre-or postconditions
 of an around advice, 
\family typewriter
$proc
\family default
 usually refers to the pre-or postconditions of the method being advised.
 In general, 
\family typewriter
$proc
\family default
 refers to the pre-or postconditions of the body that you *know* will be
 executed next when making a proceed call.
 The emphasis on *know* indicates that you should only be aware of any advice
 that have been mentioned explicitly in an 
\family typewriter
@advisedBy
\family default
 annotation of the advised method.
\end_layout

\begin_layout Standard
With contract enforcement enabled, contracts are checked at runtime, as
 well as whether methods/advice are adhering to the Liskov/advice substitution
 principle.
 (For more information on Liskov substitution, just have a look at 
\begin_inset CommandInset href
LatexCommand href
name "Wikipedia"
target "http://en.wikipedia.org/wiki/Liskov_substitution_principle"

\end_inset

.
 For more information on advice substitution, which is essentially Liskov
 substitution for aspects, have a look at section 3 in the paper 
\begin_inset CommandInset href
LatexCommand href
name "\"Design by Contract for Aspects, by Aspects\""
target "http://dl.acm.org/citation.cfm?id=2162015"

\end_inset

.) Whenever a contract is broken, a 
\family typewriter
ContractEnforcementException
\family default
 is thrown, indicating which part of the contract was broken, and who is
 to blame.
\end_layout

\begin_layout Section*
Configuration
\end_layout

\begin_layout Standard
Adbc exposes a few configuration options, such as enabling/disabling contract
 enforcement, whether or not postconditions or the substitution principle
 should be checked, or which scripting engine should be used to evaluate
 contracts.
 These options can be configured by simply modifying the static fields in
 the 
\family typewriter
AdbcConfig
\family default
 class.
\end_layout

\begin_layout Section*
Troubleshooting
\end_layout

\begin_layout Itemize
In case Eclipse throws an exception if you try to include 
\family typewriter
adbc.jar
\family default
 to the AspectJ build path, you can get around this problem by simply putting
 the adbc source code into your project instead.
 This seems due to an AJDT bug similar to 
\begin_inset CommandInset href
LatexCommand href
name "#244300"
target "https://bugs.eclipse.org/bugs/show_bug.cgi?id=244300"

\end_inset

.
 Note that you may be able to include 
\family typewriter
adbc.jar
\family default
 on the Aspect Path instead of the Inpath, but then you will only get contract
 enforcement on classes, not aspects.
\end_layout

\begin_layout Itemize
If parameter names are not available in contracts, try passing the "-g:var"
 command-line parameter to the compiler.
 (This should be enabled by default when using AJDT.) Otherwise, if parameter
 names cannot be retrieved, you can use "arg0", "arg1", ..
 instead.
\end_layout

\begin_layout Section*
\begin_inset CommandInset label
LatexCommand label
name "sec:Caveats"

\end_inset

Caveats
\end_layout

\begin_layout Itemize
Keep in mind that adbc is currently still a proof of concept.
 This means some basic features are still missing: attaching invariants
 directly to fields, or inheriting contracts from the super class.
 The performance of adbc could also be improved with some caching.
\end_layout

\begin_layout Itemize
The advice substitution principle cannot be enforced yet on higher-order
 advice (advice that advises advice..), unless this advice accesses the non-static
 part of the 
\family typewriter
thisjoinpoint
\family default
 object.
 Our contract enforcement advice needs access to that object, but it is
 created lazily by the higher-order advice, so it may or may not be available..
\end_layout

\begin_layout Itemize
Checking Liskov substitution currently assumes that overriding methods use
 the same parameter names as the overridden method.
 (This could be solved using the Paranamer library..)
\end_layout

\begin_layout Itemize
There is basic support for the 
\family typewriter
@advisedBy
\family default
 annotation/clause, but several things can be improved:
\end_layout

\begin_deeper
\begin_layout Itemize
An advice mentioned in an 
\family typewriter
@advisedBy
\family default
 clause has to be mentioned by its absolute/canonical name.
 It would be nicer if you could use its simple name (+ an import statement).
\end_layout

\begin_layout Itemize
If multiple advice are mentioned in an 
\family typewriter
@advisedBy
\family default
 clause:
\end_layout

\begin_deeper
\begin_layout Itemize
We do not enforce the ordering of the listed advice, but assume this is
 done by a separate declare precedence statement.
\end_layout

\begin_layout Itemize
When resolving the 
\family typewriter
$proc
\family default
 variable, we assume that the advice mentioned in the clause use the same
 parameter names as the join point they advise.
 (Should be possible to figure out the mapping from the advice's names to
 those used by the join point..
 Could be done by examining the advice's pointcut, but I'd rather not re-invent
 parts of the AspectJ compiler..)
\end_layout

\begin_layout Itemize
If an advice is mentioned in an 
\family typewriter
@advisedBy
\family default
 clause and its pointcut makes use of constructs that can only be determined
 at runtime, like cflow or if, you'll currently need to copy them into a
 
\family typewriter
@pointcutRuntimeTest
\family default
 annotation attached to the advice.
 This is needed to determine the effective specification of methods that
 mention such an advice in their 
\family typewriter
@advisedBy
\family default
 clause.
 The 
\family typewriter
@pointcutRuntimetest
\family default
 annotation is technically redundant information, but it's tricky to fix
 this since there's currenly no such thing as a reflection API for pointcuts..
 Another option would be to compile the effective specifications as a preprocess
ing step, as it can be done statically given the source code..
\end_layout

\end_deeper
\begin_layout Itemize
Even though advice can have names (using an 
\family typewriter
@AdviceName
\family default
 annotation), AspectJ currently does not support overriding advice, so it's
 of course not possible either to make use of this feature in an 
\family typewriter
@advisedBy
\family default
 clause..
\end_layout

\end_deeper
\begin_layout Section*
Contact
\end_layout

\begin_layout Standard
If you have any questions, suggestions or other feedback, feel free to contact
 me at tim.molderez@ua.ac.be.
 
\end_layout

\end_body
\end_document
